
name: Build & Deploy App
on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/**/src/**'
      - '.github/workflows/app-build-deploy.yaml'
  push:
    branches: [ main ]
    paths:
      - 'apps/**/src/**'
      - '.github/workflows/app-build-deploy.yaml'
jobs:
  project-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    env:
      SEGMENT_DOWNLOAD_TIMEOUT_MINS: '5' #Specify timeout in minutes. Default is 10 minutes.
      # Use docker.io for Docker Hub if empty
      REGISTRY: ghcr.io
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            config:
              - 'apps/config/src/**'
            template:
              - 'apps/template/src/**'
            email:
              - 'apps/email/src/**'
      - name: Set up config env variables
        if: steps.filter.outputs.config == 'true'
        run: |
          echo "APP_NAME=config" >> $GITHUB_ENV
      - name: Set up template env variables
        if: steps.filter.outputs.template == 'true'
        run: |
          echo "APP_NAME=template" >> $GITHUB_ENV
      - name: Set up email env variables
        if: steps.filter.outputs.email == 'true'
        run: |
          echo "APP_NAME=email" >> $GITHUB_ENV
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
#          cache: 'maven'
          #        cache-dependency-path: 'sub-project/pom.xml' # optional
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.3.0
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # v3.0.0

      # Setup Pack CLI for building containers using buildpack
#      - name: Install pack CLIs including pack and yq
#        uses: buildpacks/github-actions/setup-pack@v5.0.0


      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3 # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5 # v5.0.0
        env:
          # github.repository as <account>/<repo>
          IMAGE_NAME: ${{ github.repository }}/${{ env.APP_NAME }}
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: .
          file: Dockerfile
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # Login to Azure
      - name: Login via Azure CLI
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      - name: Deploy to Dev Container App
        uses: azure/container-apps-deploy-action@v2
        with:
          registryUrl: ${{ env.REGISTRY }}
          registryUsername: ${{ github.actor }}
          registryPassword: ${{ secrets.GITHUB_TOKEN }}
          imageToDeploy: ${{ steps.meta.outputs.tags }}
          containerAppName: kinect-${{ env.APP_NAME }}
          resourceGroup: dev-apps-rg
          containerAppEnvironment: development

      # Extract version information from project to use as image tag
#      - name: Set the version
#        run: |
#          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#          echo "VERSION=$VERSION" >> $GITHUB_ENV

#      - name: Build app with pack CLI
#        id: build-and-push
#        run: |
#          pack build ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }} \
#          --builder paketobuildpacks/builder:base \
#          --env BP_MAVEN_BUILT_MODULE=apps/config \
#          --cache-image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }} \
##          --volume "$(pwd)/appinsights:/platform/bindings/application-insights" \
#          --publish